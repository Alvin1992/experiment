<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>transitioning state</title>
    <script src="http://cdn.bootcss.com/vue/2.2.1/vue.min.js"></script>
    <style>
        .app1-preview {
            display: inline-block;
            width: 50px;
            height: 50px;
        }
    </style>
</head>
<body>
<div id="app">
    <input v-model.number="number" type="number" step="20">
    <p>{{ animatedNumber }}</p>
</div>

<div id="app-1">
    <input type="text" v-model="colorQuery" @keyup.enter="updateColor" placeholder="Enter a color">
    <button type="button" @click="updateColor">update</button>
    <p>Preview:</p>
    <span :style="{backgroundColor: tweenedCSSColor}" class="app1-preview"></span>
    <p>{{ tweenedCSSColor  }}</p>
</div>

<script src="https://unpkg.com/tween.js@16.3.4"></script>
<script src="https://unpkg.com/color-js@1.0.3/color.js"></script>
<script>
    // 数字和运算
    // 颜色的显示
    // SVG 节点的位置
    // 元素的大小和其他的属性
    // 原始数字都被事先存储起来，可以直接转换到数字
    // 通过 watcher 能监听到任何数值属性的数值更新
    var app = new Vue({
        el: '#app',
        data: {
            number: 0,
            animatedNumber: 0
        },
        watch: {
            number: function(newValue, oldValue) {
                var vm = this;
                function animate (time) {
                    requestAnimationFrame(animate);
                    TWEEN.update(time);
                }
                new TWEEN.Tween({ tweeningNumber: oldValue })
                    .easing(TWEEN.Easing.Quadratic.Out)
                    .to({ tweeningNumber: newValue }, 500)
                    .onUpdate(function () {
                        vm.animatedNumber = this.tweeningNumber.toFixed(0)
                    })
                    .start();
                animate();
            }
        }
    });

    var Color = net.brehaut.Color;
    var app1 = new Vue({
        el: '#app-1',
        data: {
            colorQuery: '',
            color: {
                red: 0,
                green: 0,
                blue: 0,
                alpha: 1
            },
            tweenedColor: {}
        },
        created: function () {
            this.tweenedColor = Object.assign({}, this.color)
        },
        watch: {
            color: function () {
                function animate (time) {
                    requestAnimationFrame(animate);
                    TWEEN.update(time)
                }
                new TWEEN.Tween(this.tweenedColor)
                    .to(this.color, 750)
                    .start();
                animate()
            }
        },
        computed: {
            tweenedCSSColor: function () {
                return new Color({
                    red: this.tweenedColor.red,
                    green: this.tweenedColor.green,
                    blue: this.tweenedColor.blue,
                    alpha: this.tweenedColor.alpha
                }).toCSS()
            }
        },
        methods: {
            updateColor: function () {
                this.color = new Color(this.colorQuery).toRGB();
                this.colorQuery = ''
            }
        }
    })
</script>
</body>
</html>
